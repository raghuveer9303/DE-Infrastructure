version: '3.8'

services:
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - data_infra_network

  airflow-webserver:
    image: apache/airflow:2.7.1
    depends_on:
      - airflow-scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://admin:raghu@123@postgres_db:5432/SII
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
    volumes:
      - ./projects/*/airflow/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - data_infra_network

  airflow-scheduler:
    image: apache/airflow:2.7.1
    depends_on:
      - airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://admin:raghu@123@postgres_db:5432/SII
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./projects/*/airflow/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    command: scheduler
    networks:
      - data_infra_network

  jupyterhub:
    image: jupyterhub/jupyterhub:latest
    ports:
      - "8001:8000"
    volumes:
      - ./shared/notebooks:/home/jovyan/work
      - jupyterhub_data:/srv/jupyterhub
    environment:
      - JUPYTER_ENABLE_LAB=yes
      # JupyterHub needs to be configured to use PostgreSQL.
      # This typically involves setting JUPYTERHUB_DB_URL or similar.
      # Example for JupyterHub DB config (verify exact env var for your jupyterhub image):
      - JUPYTERHUB_DB_URL=postgresql+psycopg2://admin:raghu@123@postgres_db:5432/SII 
      # You might need to create a separate database for JupyterHub or use the 'SII' one if appropriate.
    networks:
      - data_infra_network

  superset:
    image: apache/superset:latest
    ports:
      - "8088:8088"
    environment:
      - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY:-}
      # Superset will use this for its metadata database.
      - SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://admin:raghu@123@postgres_db:5432/SII
      # You might need to create a separate database for Superset or use the 'SII' one.
      # The POSTGRES_DB, USER, PASSWORD vars below might be used by an entrypoint script if SQLALCHEMY_DATABASE_URI is not set.
      # I'm keeping them commented for now as SQLALCHEMY_DATABASE_URI is more direct.
      # - POSTGRES_HOST=postgres_db
      # - POSTGRES_PORT=5432
      # - POSTGRES_DB=SII
      # - POSTGRES_USER=admin
      # - POSTGRES_PASSWORD=raghu@123
    volumes:
      - superset_home:/app/superset_home
    networks:
      - data_infra_network

  spark-master:
    image: bitnami/spark:latest
    ports:
      - "4040:4040"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_IPS=spark-master
      - SPARK_PUBLIC_DNS=localhost
      - SPARK_MASTER_MEMORY=2g
    volumes:
      - spark_data:/bitnami/spark
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - data_infra_network

  spark-worker-1:
    image: bitnami/spark:latest
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=8g
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_IPS=spark-worker-1
      - SPARK_PUBLIC_DNS=localhost
    depends_on:
      - spark-master
    volumes:
      - spark_data:/bitnami/spark
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '1'
        reservations:
          memory: 4G
    networks:
      - data_infra_network

  spark-worker-2:
    image: bitnami/spark:latest
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=8g
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_IPS=spark-worker-2
      - SPARK_PUBLIC_DNS=localhost
    depends_on:
      - spark-master
    volumes:
      - spark_data:/bitnami/spark
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '1'
        reservations:
          memory: 4G
    networks:
      - data_infra_network

  spark-worker-3:
    image: bitnami/spark:latest
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=8g
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_IPS=spark-worker-3
      - SPARK_PUBLIC_DNS=localhost
    depends_on:
      - spark-master
    volumes:
      - spark_data:/bitnami/spark
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '1'
        reservations:
          memory: 4G
    networks:
      - data_infra_network

  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.5.0
    volumes:
      - ./projects/*/dbt:/opt/dbt
    # dbt will connect via its profiles.yml. Ensure that profiles.yml is configured
    # to use host: postgres_db, user: admin, password: raghu@123, dbname: SII
    networks:
      - data_infra_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - data_infra_network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka_data:/var/lib/kafka/data
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    networks:
      - data_infra_network

volumes:
  minio_data:
  airflow_logs:
  jupyterhub_data:
  superset_home:
  spark_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:

networks:
  data_infra_network:
    external: true
    name: data-infra-network 